from aiogram import Router, F, types, Bot
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
import logging
from core.models.db_helper import db_helper
from core.repositories import ChannelRepository, FolderRepository

from telegram.telethon_client import TelegramClientWrapper
from utils.create_keyboard import CreateKeyboard

channel_router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

client_wrapper = TelegramClientWrapper()
channelRepo = ChannelRepository(db_helper.session_getter)
folderRepo = FolderRepository(db_helper.session_getter)
bot = Bot(token="6830235739:AAG0Bo5lnabU4hDVWlhPQmLtiMVePI2xRGg")


class Form(StatesGroup):
    waiting_for_number = State()
    waiting_folder_title = ""
    waiting_message_id = 0
    waiting_callback_id = ""


@channel_router.callback_query(F.data.startswith("info_"))
async def handle_channel_selection(
    callback_query: types.CallbackQuery, state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞."""
    logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞.")
    Form.waiting_callback_id = callback_query.id
    folder_title = callback_query.data[5:]  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "info_"
    if folder_title == "ALL":
        channels = await channelRepo.select_all_channels()
    else:
        channels = await channelRepo.select_channels_by_folder_id(folder_title)
    channels = sorted(channels, key=lambda channel: channel.id)
    channels_group_message = f"–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –≤ –ø–∞–ø–∫–µ - {folder_title}\n\n"
    for channel in channels:
        if channel.channel_stats == "active":
            channels_group_message += f"üü¢ {channel.id} - {channel.channel_name}\n"
        elif channel.channel_stats == "test":
            channels_group_message += f"üü° {channel.id} - {channel.channel_name} \n"
        elif channel.channel_stats == "disable":
            channels_group_message += f"üî¥ {channel.id} - {channel.channel_name}\n"

    if folder_title != "ALL":
        await callback_query.message.edit_text(
            f"{channels_group_message}\n –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:",
            reply_markup=await CreateKeyboard().state_folder(
                (await folderRepo.select_folder_by_title(folder_title)).folder_status,
                folder_title,
            ),
        )
    else:
        await callback_query.message.edit_text(
            f"{channels_group_message}\n –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:",
        )
    await state.set_state(Form.waiting_for_number)
    Form.waiting_folder_title = folder_title
    Form.waiting_message_id = callback_query.message.message_id
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–∞–ø–∫–∏ {folder_title}.")


@channel_router.message(Form.waiting_for_number)
async def id_channel(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –∫–∞–Ω–∞–ª–∞."""
    logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ ID –∫–∞–Ω–∞–ª–∞.")
    if message.text.isdigit():
        channels_group_message = (
            f"–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –≤ –ø–∞–ø–∫–µ - {Form.waiting_folder_title}\n\n"
        )
        channel = await channelRepo.select_channels_by_row_id(int(message.text))
        if channel is None:
            await bot.answer_callback_query(
                Form.waiting_callback_id, show_alert=True, text="–ù–µ—Ç —Ç–∞–∫–æ–≥–æ id"
            )
            return
        elif channel.channel_stats == "active" and (
            channel.folder_id == Form.waiting_folder_title
            or Form.waiting_folder_title == "ALL"
        ):
            channels_group_message += (
                f"üü¢ {channel.channel_name}\nID: {channel.channel_id}"
            )
        elif channel.channel_stats == "test" and (
            channel.folder_id == Form.waiting_folder_title
            or Form.waiting_folder_title == "ALL"
        ):
            channels_group_message += (
                f"üü° {channel.channel_name}\nID: {channel.channel_id}"
            )
        elif channel.channel_stats == "disable" and (
            channel.folder_id == Form.waiting_folder_title
            or Form.waiting_folder_title == "ALL"
        ):
            channels_group_message += (
                f"üî¥ {channel.channel_name}\nID: {channel.channel_id}"
            )
        await message.answer(
            f"{channels_group_message}",
            reply_markup=await CreateKeyboard().create_kb_chanel_settings(
                channel.id, Form.waiting_folder_title
            ),
        )
    else:
        await state.clear()
        if message.text == "–ü–ê–ü–ö–ò/–ö–ê–ù–ê–õ–´":
            await get_list_channel(message)
        elif message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            pass
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –∫–∞–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


@channel_router.callback_query(F.data.startswith("set_"))
async def handle_channel_selection(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–∞."""
    logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–∞.")
    set_title = callback_query.data.split("_")
    if set_title[1] == "active":
        await channelRepo.update_stats_channel(int(set_title[2]), set_title[1])
    elif set_title[1] == "test":
        await channelRepo.update_stats_channel(int(set_title[2]), set_title[1])
    elif set_title[1] == "disable":
        await channelRepo.update_stats_channel(int(set_title[2]), set_title[1])

    await callback_query.message.delete()

    if set_title[3] == "ALL":
        channels = await channelRepo.select_all_channels()
    else:
        channels = await channelRepo.select_channels_by_folder_id(set_title[3])
    channels = sorted(channels, key=lambda channel: channel.id)
    channels_group_message = f"–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –≤ –ø–∞–ø–∫–µ - {Form.waiting_folder_title}\n\n"
    for channel in channels:
        if channel.channel_stats == "active":
            channels_group_message += f"üü¢ {channel.id} - {channel.channel_name}\n"
        elif channel.channel_stats == "test":
            channels_group_message += f"üü° {channel.id} - {channel.channel_name} \n"
        elif channel.channel_stats == "disable":
            channels_group_message += f"üî¥ {channel.id} - {channel.channel_name}\n"

    if set_title[3] == "ALL":
        await bot.edit_message_text(
            channels_group_message + "\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª",
            chat_id=callback_query.from_user.id,
            message_id=Form.waiting_message_id,
        )
    else:
        await bot.edit_message_text(
            channels_group_message + "\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª",
            chat_id=callback_query.from_user.id,
            message_id=Form.waiting_message_id,
            reply_markup=await CreateKeyboard().state_folder(
                (await folderRepo.select_folder_by_title(set_title[3])).folder_status,
                set_title[3],
            ),
        )
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


@channel_router.callback_query(F.data.startswith("folder_"))
async def handle_channel_selection(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∞–ø–∫–∏."""
    logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∞–ø–∫–∏.")
    set_stats = callback_query.data.split("_")
    if set_stats[1] == "off":
        await folderRepo.update_stats_folder(set_stats[2], "disable")
        await callback_query.message.edit_reply_markup(
            reply_markup=await CreateKeyboard().state_folder(
                (await folderRepo.select_folder_by_title(set_stats[2])).folder_status,
                set_stats[2],
            )
        )
    else:
        await folderRepo.update_stats_folder(set_stats[2], "active")
        await callback_query.message.edit_reply_markup(
            reply_markup=await CreateKeyboard().state_folder(
                (await folderRepo.select_folder_by_title(set_stats[2])).folder_status,
                set_stats[2],
            )
        )
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∞–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


@channel_router.message(F.text == "–ü–ê–ü–ö–ò/–ö–ê–ù–ê–õ–´")
async def get_list_channel(message: types.Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫/–∫–∞–Ω–∞–ª–æ–≤."""
    logger.info("–ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫/–∫–∞–Ω–∞–ª–æ–≤.")
    folder_list = await client_wrapper.get_folders()
    kb = await CreateKeyboard().create_kb_folders(folder_list)
    await message.answer("–ü–∞–ø–∫–∏:", reply_markup=kb)
    logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫/–∫–∞–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
